import { AuthScreen } from './src/components/AuthScreen.js';
import { initAuth } from './src/utils/api.js';

class QuantumTicTacToe {
    constructor() {
        this.user = null;
        this.socket = null;
        this.currentScreen = null;
        
        this.init();
    }

    async init() {
        try {
            console.log('üöÄ Initializing Quantum Tic-Tac-Toe...');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ Telegram WebApp
            if (!window.Telegram || !Telegram.WebApp) {
                this.showError('Please open this game in Telegram');
                return;
            }

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram WebApp
            Telegram.WebApp.ready();
            Telegram.WebApp.expand(); // –ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º
            Telegram.WebApp.enableClosingConfirmation(); // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–∞
            
            console.log('üì± Telegram WebApp initialized');

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            this.showAuthScreen();

            // –ü—Ä–æ—Ö–æ–¥–∏–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
            await this.authenticate();

        } catch (error) {
            console.error('‚ùå Initialization error:', error);
            this.showError('Failed to initialize: ' + error.message);
        }
    }

    showAuthScreen() {
        const authContainer = document.getElementById('auth-screen');
        this.authScreen = new AuthScreen((user) => this.onAuthSuccess(user));
        authContainer.appendChild(this.authScreen.element);
        authContainer.classList.add('active');
        this.currentScreen = 'auth';
    }

    async authenticate() {
        try {
            this.authScreen.updateStatus('Connecting to server...');
            
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç Telegram
            const initData = Telegram.WebApp.initData;
            console.log('üìã InitData received:', initData);

            if (!initData) {
                throw new Error('No authentication data from Telegram');
            }

            this.authScreen.updateStatus('Verifying...');
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            this.user = await initAuth(initData);
            
            this.authScreen.updateStatus('Success! Starting game...');
            
            // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ
            setTimeout(() => this.onAuthSuccess(this.user), 1000);

        } catch (error) {
            console.error('‚ùå Authentication failed:', error);
            this.authScreen.showError(error);
        }
    }

    onAuthSuccess(user) {
        console.log('‚úÖ Authenticated as:', user);
        
        // –°–∫—Ä—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        document.getElementById('auth-screen').classList.remove('active');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        this.showGameInterface(user);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç —Ç–µ–º—É Telegram
        this.setTelegramTheme();
    }

    showGameInterface(user) {
        const overlay = document.getElementById('ui-overlay');
        overlay.innerHTML = `
            <div class="user-info">
                üë§ ${user.first_name}${user.username ? ` (@${user.username})` : ''}
            </div>
            <div class="game-controls">
                <button onclick="app.createLobby()">Create Lobby</button>
                <button onclick="app.joinLobby()">Join Lobby</button>
            </div>
        `;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–≥—Ä–æ–≤–æ–π —ç–∫—Ä–∞–Ω
        document.getElementById('game-screen').classList.add('active');
        this.currentScreen = 'game';
        
        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Three.js —Å—Ü–µ–Ω—ã
        this.initGameScene();
    }

    setTelegramTheme() {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–º—É –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ Telegram
        const themeParams = Telegram.WebApp.themeParams;
        document.documentElement.style.setProperty('--bg-color', themeParams.bg_color || '#667eea');
        document.documentElement.style.setProperty('--text-color', themeParams.text_color || '#ffffff');
    }

    initGameScene() {
        // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è Three.js –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        console.log('üéÆ Initializing game scene...');
        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∫–æ–¥ –∏–∑ gameScene.js
    }

    showError(message) {
        const appDiv = document.getElementById('app');
        appDiv.innerHTML = `
            <div class="error-screen">
                <h2>‚ùå Error</h2>
                <p>${message}</p>
                <button onclick="window.location.reload()">Restart</button>
            </div>
        `;
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–æ–±–±–∏ (–∑–∞–≥–ª—É—à–∫–∏)
    createLobby() {
        console.log('Creating lobby...');
        Telegram.WebApp.showPopup({
            title: 'Create Lobby',
            message: 'Lobby creation will be implemented soon!'
        });
    }

    joinLobby() {
        console.log('Joining lobby...');
        Telegram.WebApp.showPopup({
            title: 'Join Lobby',
            message: 'Lobby joining will be implemented soon!'
        });
    }
}

// –î–µ–ª–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–º –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ HTML
window.app = new QuantumTicTacToe();